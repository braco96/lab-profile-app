{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luisbra\\\\Desktop\\\\proyectos\\\\lab-profile-app\\\\profile-app-client\\\\src\\\\context\\\\auth.context.js\",\n  _s = $RefreshSig$();\n// Context used to share authentication state across components\n\nimport React, { useState, useEffect } from 'react';\nimport authService from '../services/auth.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\nfunction AuthProviderWrapper(props) {\n  _s();\n  // Store authentication state\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  // Store the JWT token in localStorage for persistence\n  const storeToken = token => {\n    localStorage.setItem('authToken', token);\n  };\n\n  // Remove token from storage\n  const removeToken = () => {\n    localStorage.removeItem('authToken');\n  };\n\n  // Validate token with server and update user state\n  const authenticateUser = async () => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        const response = await authService.verifyToken(token);\n        setIsLoggedIn(true);\n        setIsLoading(false);\n        setUser(response.data);\n      } catch (err) {\n        setIsLoggedIn(false);\n        setIsLoading(false);\n        setUser(null);\n      }\n    } else {\n      setIsLoggedIn(false);\n      setIsLoading(false);\n      setUser(null);\n    }\n  };\n\n  // Wrapper for login that stores token and authenticates user\n  const logInUser = async credentials => {\n    const response = await authService.logIn(credentials);\n    storeToken(response.data.authToken);\n    await authenticateUser();\n  };\n\n  // Log out by removing token and updating state\n  const logOutUser = () => {\n    removeToken();\n    authenticateUser();\n  };\n  useEffect(() => {\n    authenticateUser();\n  }, []); // run once on mount\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      isLoading,\n      user,\n      storeToken,\n      authenticateUser,\n      logOutUser,\n      logInUser\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProviderWrapper, \"/wkMYUExdyWtGyjS2AwugXhX2sw=\");\n_c = AuthProviderWrapper;\nexport { AuthProviderWrapper, AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProviderWrapper\");","map":{"version":3,"names":["React","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","createContext","AuthProviderWrapper","props","_s","isLoggedIn","setIsLoggedIn","isLoading","setIsLoading","user","setUser","storeToken","token","localStorage","setItem","removeToken","removeItem","authenticateUser","getItem","response","verifyToken","data","err","logInUser","credentials","logIn","authToken","logOutUser","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Luisbra/Desktop/proyectos/lab-profile-app/profile-app-client/src/context/auth.context.js"],"sourcesContent":["// Context used to share authentication state across components\n\nimport React, { useState, useEffect } from 'react';\nimport authService from '../services/auth.service';\n\nconst AuthContext = React.createContext();\n\nfunction AuthProviderWrapper(props) {\n  // Store authentication state\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  // Store the JWT token in localStorage for persistence\n  const storeToken = (token) => {\n    localStorage.setItem('authToken', token);\n  };\n\n  // Remove token from storage\n  const removeToken = () => {\n    localStorage.removeItem('authToken');\n  };\n\n  // Validate token with server and update user state\n  const authenticateUser = async () => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        const response = await authService.verifyToken(token);\n        setIsLoggedIn(true);\n        setIsLoading(false);\n        setUser(response.data);\n      } catch (err) {\n        setIsLoggedIn(false);\n        setIsLoading(false);\n        setUser(null);\n      }\n    } else {\n      setIsLoggedIn(false);\n      setIsLoading(false);\n      setUser(null);\n    }\n  };\n\n  // Wrapper for login that stores token and authenticates user\n  const logInUser = async (credentials) => {\n    const response = await authService.logIn(credentials);\n    storeToken(response.data.authToken);\n    await authenticateUser();\n  };\n\n  // Log out by removing token and updating state\n  const logOutUser = () => {\n    removeToken();\n    authenticateUser();\n  };\n\n  useEffect(() => {\n    authenticateUser();\n  }, []); // run once on mount\n\n  return (\n    <AuthContext.Provider\n      value={{ isLoggedIn, isLoading, user, storeToken, authenticateUser, logOutUser, logInUser }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthProviderWrapper, AuthContext };\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,gBAAGN,KAAK,CAACO,aAAa,CAAC,CAAC;AAEzC,SAASC,mBAAmBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAClC;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAMgB,UAAU,GAAIC,KAAK,IAAK;IAC5BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxBF,YAAY,CAACG,UAAU,CAAC,WAAW,CAAC;EACtC,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,MAAML,KAAK,GAAGC,YAAY,CAACK,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIN,KAAK,EAAE;MACT,IAAI;QACF,MAAMO,QAAQ,GAAG,MAAMtB,WAAW,CAACuB,WAAW,CAACR,KAAK,CAAC;QACrDN,aAAa,CAAC,IAAI,CAAC;QACnBE,YAAY,CAAC,KAAK,CAAC;QACnBE,OAAO,CAACS,QAAQ,CAACE,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZhB,aAAa,CAAC,KAAK,CAAC;QACpBE,YAAY,CAAC,KAAK,CAAC;QACnBE,OAAO,CAAC,IAAI,CAAC;MACf;IACF,CAAC,MAAM;MACLJ,aAAa,CAAC,KAAK,CAAC;MACpBE,YAAY,CAAC,KAAK,CAAC;MACnBE,OAAO,CAAC,IAAI,CAAC;IACf;EACF,CAAC;;EAED;EACA,MAAMa,SAAS,GAAG,MAAOC,WAAW,IAAK;IACvC,MAAML,QAAQ,GAAG,MAAMtB,WAAW,CAAC4B,KAAK,CAACD,WAAW,CAAC;IACrDb,UAAU,CAACQ,QAAQ,CAACE,IAAI,CAACK,SAAS,CAAC;IACnC,MAAMT,gBAAgB,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMU,UAAU,GAAGA,CAAA,KAAM;IACvBZ,WAAW,CAAC,CAAC;IACbE,gBAAgB,CAAC,CAAC;EACpB,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdqB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACElB,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IACnBC,KAAK,EAAE;MAAExB,UAAU;MAAEE,SAAS;MAAEE,IAAI;MAAEE,UAAU;MAAEM,gBAAgB;MAAEU,UAAU;MAAEJ;IAAU,CAAE;IAAAO,QAAA,EAE3F3B,KAAK,CAAC2B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B;AAAC9B,EAAA,CA7DQF,mBAAmB;AAAAiC,EAAA,GAAnBjC,mBAAmB;AA+D5B,SAASA,mBAAmB,EAAEF,WAAW;AAAG,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}